{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SJ-1011/My_NLP_Study/blob/main/Traditional%20NLP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sF0BmaZ-1zmk"
      },
      "source": [
        "#Analyzing Text Data\n",
        "## Load relevent Packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lG40Q87R1zmm",
        "outputId": "fbb6b0b5-375e-4f9c-e27d-f199fb4d7189"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# Import spacy\n",
        "import spacy\n",
        "\n",
        "# Loading NLTK module\n",
        "import nltk\n",
        "\n",
        "# downloading punkt\n",
        "nltk.download('punkt')\n",
        "\n",
        "# downloading stopwords\n",
        "nltk.download('stopwords')\n",
        "\n",
        "# downloading omw-1.4\n",
        "nltk.download('omw-1.4')\n",
        "\n",
        "# downloading wordnet\n",
        "nltk.download('wordnet')\n",
        "\n",
        "# downloading average_perception_tagger\n",
        "nltk.download('averaged_perceptron_tagger')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hFLNnmbs1zmm"
      },
      "source": [
        "## Tokenization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YTtW6Iuq1zmn",
        "outputId": "5a20661b-6254-42ba-826b-acb038c07bbb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Taj Mahal is one of the beautiful monuments.', 'It is one of the wonders of the world.', 'It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.']\n"
          ]
        }
      ],
      "source": [
        "# Sentence Tokenization\n",
        "from nltk.tokenize import sent_tokenize\n",
        "\n",
        "paragraph=\"\"\"Taj Mahal is one of the beautiful monuments. It is one of the wonders of the world. It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.\"\"\"\n",
        "\n",
        "tokenized_sentences=sent_tokenize(paragraph)\n",
        "print(tokenized_sentences)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HiuBT-jm1zmn",
        "outputId": "bd8c85de-160e-4199-a8cb-056a386b8724"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Taj Mahal is one of the beautiful monuments.', 'It is one of the wonders of the world.', 'It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.']\n"
          ]
        }
      ],
      "source": [
        "# Loading english language model\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Append the sentencizer pipe to the nlp pipeline\n",
        "nlp.add_pipe('sentencizer')\n",
        "\n",
        "paragraph = \"\"\"Taj Mahal is one of the beautiful monuments. It is one of the wonders of the world. It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.\"\"\"\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in a documents.\n",
        "nlp_doc = nlp(paragraph)\n",
        "\n",
        "# Generate list of tokenized sentence\n",
        "tokenized_sentences = []\n",
        "for sentence in nlp_doc.sents:\n",
        "    tokenized_sentences.append(sentence.text)\n",
        "print(tokenized_sentences)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nscR6b8g1zmn",
        "outputId": "b3520d9f-8134-427e-a394-226a888e56cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Taj', 'Mahal', 'is', 'one', 'of', 'the', 'beautiful', 'monuments', '.', 'It', 'is', 'one', 'of', 'the', 'wonders', 'of', 'the', 'world', '.', 'It', 'was', 'built', 'by', 'Shah', 'Jahan', 'in', '1631', 'in', 'memory', 'of', 'his', 'third', 'beloved', 'wife', 'Mumtaj', 'Mahal', '.']\n"
          ]
        }
      ],
      "source": [
        "# Import nltk word_tokenize method\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "# Split paragraph into words\n",
        "tokenized_words=word_tokenize(paragraph)\n",
        "print(tokenized_words)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2xk4p7D_1zmo",
        "outputId": "d685330a-0f96-456c-de6d-701104f22298"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Taj', 'Mahal', 'is', 'one', 'of', 'the', 'beautiful', 'monuments', '.', 'It', 'is', 'one', 'of', 'the', 'wonders', 'of', 'the', 'world', '.', 'It', 'was', 'built', 'by', 'Shah', 'Jahan', 'in', '1631', 'in', 'memory', 'of', 'his', 'third', 'beloved', 'wife', 'Mumtaj', 'Mahal', '.']\n"
          ]
        }
      ],
      "source": [
        "# Loading english language model\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "paragraph = \"\"\"Taj Mahal is one of the beautiful monuments. It is one of the wonders of the world. It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.\"\"\"\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in a documents.\n",
        "my_doc = nlp(paragraph)\n",
        "\n",
        "# tokenize paragraph into words\n",
        "tokenized_words = []\n",
        "for token in my_doc:\n",
        "    tokenized_words.append(token.text)\n",
        "print(tokenized_words)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a_L70u5y1zmo",
        "outputId": "f1541fe2-7641-46c3-a2fe-c33890fd85e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('of', 4), ('the', 3), ('.', 3), ('Mahal', 2), ('is', 2)]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Import frequency distribution\n",
        "from nltk.probability import FreqDist\n",
        "\n",
        "# Find frequency distribution of paragraph\n",
        "fdist = FreqDist(tokenized_words)\n",
        "\n",
        "# Check top 5 common words\n",
        "fdist.most_common(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "id": "ZbB7o_911zmp",
        "outputId": "ad3a5d01-eb6d-445c-9d4b-a06aa66e5f04"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot Frequency Distribution\n",
        "fdist.plot(20, cumulative=False)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CCPSXWQG1zmp"
      },
      "source": [
        "## Stopwords"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xnKZtTg8cESS",
        "outputId": "987b51bd-ef83-423f-caff-d3aa5be21096"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'of', 'i', 'what', 'the', 'will', 't', \"hadn't\", 'now', \"hasn't\", 'their', 'through', 'not', \"needn't\", 'you', 'did', 'ourselves', 'itself', 'who', 'hadn', 'haven', 'some', 're', 'while', 'very', 'such', 'both', 'ours', 'o', 'was', \"you'll\", 'myself', 'hasn', 'won', 'your', 'there', 'until', 'him', 'them', 'in', 'then', 'by', 'be', \"wouldn't\", 'can', 'they', 'herself', \"doesn't\", \"you've\", 'do', 'yours', 'further', 'on', 'other', 'he', 'ma', \"shan't\", 'couldn', 'between', 'as', 'each', 'himself', \"should've\", \"haven't\", 'no', 'yourselves', 'are', 'should', 'she', 'this', 'am', 'during', 'from', 'which', 'her', 'and', 'it', 's', 'wouldn', 'than', 'more', 'm', 'when', 'been', 'shan', 'for', 'does', 'only', 'after', 'down', 'd', 'off', 'wasn', 'has', 'against', 'once', 'shouldn', 'to', 'under', \"couldn't\", 'a', 'isn', 'if', \"wasn't\", 'all', \"shouldn't\", 'how', \"it's\", 'doing', \"aren't\", 'where', 'didn', 'those', 'too', 'my', \"you're\", 'out', 'me', \"that'll\", 'few', \"isn't\", 'above', 'nor', 'just', 'that', 'aren', \"didn't\", 'having', 'weren', 'mightn', 'but', 'into', \"weren't\", 'themselves', 'below', 'with', \"you'd\", 'hers', \"won't\", 'were', 'y', 'at', 'our', 'theirs', 'being', \"mustn't\", 'or', \"don't\", 'here', 'before', 'have', 'yourself', 'any', 'ain', 'again', 'needn', 'up', \"she's\", 'these', 'so', 'because', 'its', 'why', 'don', 've', 'his', 'doesn', 'll', 'about', 'most', 'over', 'we', 'mustn', 'is', 'had', 'same', 'own', 'whom', \"mightn't\", 'an'}\n"
          ]
        }
      ],
      "source": [
        "# import the nltk stopwords\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "# Load english stopwords list\n",
        "stopwords_set=set(stopwords.words(\"english\"))\n",
        "\n",
        "print(stopwords_set)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0GrCxLbs1zmp",
        "outputId": "fec3d4fe-906c-44bd-bd70-4ac9e1d2a12d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tokenized Word List: ['Taj', 'Mahal', 'is', 'one', 'of', 'the', 'beautiful', 'monuments', '.', 'It', 'is', 'one', 'of', 'the', 'wonders', 'of', 'the', 'world', '.', 'It', 'was', 'built', 'by', 'Shah', 'Jahan', 'in', '1631', 'in', 'memory', 'of', 'his', 'third', 'beloved', 'wife', 'Mumtaj', 'Mahal', '.']\n",
            "Filtered Word List: ['Taj', 'Mahal', 'one', 'beautiful', 'monuments', '.', 'It', 'one', 'wonders', 'world', '.', 'It', 'built', 'Shah', 'Jahan', '1631', 'memory', 'third', 'beloved', 'wife', 'Mumtaj', 'Mahal', '.']\n"
          ]
        }
      ],
      "source": [
        "# Removing stopwords from text\n",
        "filtered_word_list=[]\n",
        "for word in tokenized_words:\n",
        "    # filter stopwords\n",
        "    if word not in stopwords_set:\n",
        "        filtered_word_list.append(word)\n",
        "\n",
        "# print tokenized words\n",
        "print(\"Tokenized Word List:\", tokenized_words)\n",
        "\n",
        "# print filtered words\n",
        "print(\"Filtered Word List:\", filtered_word_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9UXt8xVn1zmp",
        "outputId": "1cb2a049-b86f-414d-ac82-53e37cc2d4f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Filtered Word List: [Taj, Mahal, beautiful, monuments, ., wonders, world, ., built, Shah, Jahan, 1631, memory, beloved, wife, Mumtaj, Mahal, .]\n"
          ]
        }
      ],
      "source": [
        "# Loading english language model\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# text paragraph\n",
        "paragraph = \"\"\"Taj Mahal is one of the beautiful monuments. It is one of the wonders of the world. It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.\"\"\"\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in a documents.\n",
        "my_doc = nlp(paragraph)\n",
        "\n",
        "# Removing stopwords from text\n",
        "filtered_token_list=[]\n",
        "for token in my_doc:\n",
        "    # filter stopwords\n",
        "    if token.is_stop==False:\n",
        "        filtered_token_list.append(token)\n",
        "\n",
        "print(\"Filtered Word List:\",filtered_token_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f5Yn-XIQ1zmp"
      },
      "source": [
        "## Stemming and Lemmatization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "veOsxXzU1zmq",
        "outputId": "9c3b0b76-bb3e-403a-b0e6-3665305cad31"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lemmatized Sample Word: cry\n",
            "Stemmed Sample Word: cri\n"
          ]
        }
      ],
      "source": [
        "# Import Lemmatizer\n",
        "from nltk.stem.wordnet import WordNetLemmatizer\n",
        "\n",
        "# Create lemmatizer object\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "# Import Porter Stemmer\n",
        "from nltk.stem.porter import PorterStemmer\n",
        "\n",
        "# Create stemmer object\n",
        "stemmer = PorterStemmer()\n",
        "\n",
        "# take a sample word\n",
        "sample_word = \"crying\"\n",
        "\n",
        "print(\"Lemmatized Sample Word:\", lemmatizer.lemmatize(sample_word,\"v\"))\n",
        "\n",
        "print(\"Stemmed Sample Word:\", stemmer.stem(sample_word))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Id0PDtjZ1zmq",
        "outputId": "130a1cfb-375e-4ca0-97ef-76d7b484877c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Word:  cry\n",
            "Lemmatized Word:  cry\n",
            "Original Word:  cries\n",
            "Lemmatized Word:  cry\n",
            "Original Word:  crying\n",
            "Lemmatized Word:  cry\n"
          ]
        }
      ],
      "source": [
        "# Loading english language model\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in documents.\n",
        "words = nlp(\"cry cries crying\")\n",
        "\n",
        "# Find lemmatized word\n",
        "for w in words:\n",
        "    print('Original Word: ', w.text)\n",
        "    print('Lemmatized Word: ',w.lemma_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QxenE1_A1zmq"
      },
      "source": [
        "## PoS Tagging"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rvCoT9mw1zmq",
        "outputId": "91bdf166-5d51-48e4-bce0-ba0d5d8cb135"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('Taj', 'NNP'), ('Mahal', 'NNP'), ('is', 'VBZ'), ('one', 'CD'), ('of', 'IN'), ('the', 'DT'), ('beautiful', 'JJ'), ('monument', 'NN'), ('.', '.')]\n"
          ]
        }
      ],
      "source": [
        "# import Word Tokenizer and Pos Tagger\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk import pos_tag\n",
        "\n",
        "# Sample sentence\n",
        "sentence = \"Taj Mahal is one of the beautiful monument.\"\n",
        "\n",
        "# Tokenize the sentence\n",
        "sent_tokens = word_tokenize(sentence)\n",
        "\n",
        "# Create PoS tags\n",
        "sent_pos = pos_tag(sent_tokens)\n",
        "\n",
        "# Print tokens with PoS\n",
        "print(sent_pos)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DW9X8Iuv1zmq",
        "outputId": "7d1271ef-efbf-43f8-e189-9b10f86ace03"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Taj PROPN\n",
            "Mahal PROPN\n",
            "is AUX\n",
            "one NUM\n",
            "of ADP\n",
            "the DET\n",
            "beautiful ADJ\n",
            "monument NOUN\n",
            ". PUNCT\n"
          ]
        }
      ],
      "source": [
        "# Loading small english language model\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in a documents.\n",
        "sentence = nlp(u\"Taj Mahal is one of the beautiful monument.\")\n",
        "\n",
        "for token in sentence:\n",
        "    print(token.text, token.pos_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5HvnsV5k1zmq"
      },
      "source": [
        "## Entity Recognition"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FjmhRWq-1zmq",
        "outputId": "c4b81361-9cae-490e-ac3b-ced3fec782b3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('Taj Mahal', 'PERSON'), ('Shah Jahan', 'ORG'), ('1631', 'DATE'), ('third', 'ORDINAL'), ('Mumtaj Mahal', 'PERSON')]\n"
          ]
        }
      ],
      "source": [
        "# Load English model for tokenizer, tagger, parser, and NER\n",
        "nlp = spacy.load('en_core_web_sm')\n",
        "\n",
        "# Sample paragraph\n",
        "paragraph = \"\"\"Taj Mahal is one of the beautiful monuments. It is one of the wonders of the world. It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.\"\"\"\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in documents.\n",
        "docs=nlp(paragraph)\n",
        "\n",
        "entities=[(i.text, i.label_) for i in docs.ents]\n",
        "print(entities)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "0CR6cxSp1QEV",
        "outputId": "c3596350-fcbe-4e75-90da-e81fbda36c50"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Taj Mahal\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n",
              "</mark>\n",
              " is one of the beautiful monuments. It is one of the wonders of the world. It was built by \n",
              "<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Shah Jahan\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n",
              "</mark>\n",
              " in \n",
              "<mark class=\"entity\" style=\"background: #bfe1d9; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    1631\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">DATE</span>\n",
              "</mark>\n",
              " in memory of his \n",
              "<mark class=\"entity\" style=\"background: #e4e7d2; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    third\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORDINAL</span>\n",
              "</mark>\n",
              " beloved wife \n",
              "<mark class=\"entity\" style=\"background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Mumtaj Mahal\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n",
              "</mark>\n",
              ".</div></span>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import display for visualizing the Entities\n",
        "from spacy import displacy\n",
        " # Visualize the entities using render function\n",
        "displacy.render(docs, style = \"ent\",jupyter = True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q2H49yd71zmq"
      },
      "source": [
        "## Dependency Parsing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "83iL1YY21zmr",
        "outputId": "90afa585-3dc2-4839-a7a7-271aee09759d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"8c868d695eba42c79ec9a184612ef293-0\" class=\"displacy\" width=\"1250\" height=\"362.0\" direction=\"ltr\" style=\"max-width: none; height: 362.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">Taj</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">PROPN</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"200\">Mahal</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"200\">PROPN</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"350\">is</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"350\">AUX</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"500\">one</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"500\">NUM</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"650\">of</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"650\">ADP</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"800\">the</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"800\">DET</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"950\">beautiful</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"950\">ADJ</tspan>\n",
              "</text>\n",
              "\n",
              "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"272.0\">\n",
              "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"1100\">monument.</tspan>\n",
              "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"1100\">NOUN</tspan>\n",
              "</text>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-0\" stroke-width=\"2px\" d=\"M70,227.0 C70,152.0 190.0,152.0 190.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">compound</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M70,229.0 L62,217.0 78,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-1\" stroke-width=\"2px\" d=\"M220,227.0 C220,152.0 340.0,152.0 340.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M220,229.0 L212,217.0 228,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-2\" stroke-width=\"2px\" d=\"M370,227.0 C370,152.0 490.0,152.0 490.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">attr</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M490.0,229.0 L498.0,217.0 482.0,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-3\" stroke-width=\"2px\" d=\"M520,227.0 C520,152.0 640.0,152.0 640.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">prep</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M640.0,229.0 L648.0,217.0 632.0,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-4\" stroke-width=\"2px\" d=\"M820,227.0 C820,77.0 1095.0,77.0 1095.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-4\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M820,229.0 L812,217.0 828,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-5\" stroke-width=\"2px\" d=\"M970,227.0 C970,152.0 1090.0,152.0 1090.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-5\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">amod</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M970,229.0 L962,217.0 978,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "\n",
              "<g class=\"displacy-arrow\">\n",
              "    <path class=\"displacy-arc\" id=\"arrow-8c868d695eba42c79ec9a184612ef293-0-6\" stroke-width=\"2px\" d=\"M670,227.0 C670,2.0 1100.0,2.0 1100.0,227.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
              "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
              "        <textPath xlink:href=\"#arrow-8c868d695eba42c79ec9a184612ef293-0-6\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">pobj</textPath>\n",
              "    </text>\n",
              "    <path class=\"displacy-arrowhead\" d=\"M1100.0,229.0 L1108.0,217.0 1092.0,217.0\" fill=\"currentColor\"/>\n",
              "</g>\n",
              "</svg></span>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Load English model for tokenizer, tagger, parser, and NER\n",
        "nlp = spacy.load('en_core_web_sm')\n",
        "\n",
        "# Sample sentence\n",
        "sentence=\"Taj Mahal is one of the beautiful monument.\"\n",
        "\n",
        "# Create nlp Object to handle linguistic annotations in a documents.\n",
        "docs=nlp(sentence)\n",
        "\n",
        "# Visualize the  using render function\n",
        "displacy.render(docs, style=\"dep\", jupyter= True, options={'distance': 150})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xy-xuSZH1zmr"
      },
      "source": [
        "## WordCloud"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "7iBLmtMA1zmr",
        "outputId": "dcaa1c1b-24f8-430d-fb45-00aa9a96c6a2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# importing all necessary modules\n",
        "from wordcloud import WordCloud\n",
        "from wordcloud import STOPWORDS\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "stopword_list = set(STOPWORDS)\n",
        "\n",
        "paragraph=\"\"\"Taj Mahal is one of the beautiful monuments. It is one of the wonders of the world. It was built by Shah Jahan in 1631 in memory of his third beloved wife Mumtaj Mahal.\"\"\"\n",
        "\n",
        "word_cloud = WordCloud(width = 550, height = 550,\n",
        "                       background_color ='white',\n",
        "                       stopwords = stopword_list,\n",
        "                       min_font_size = 10).generate(paragraph)\n",
        "\n",
        "# Visualize the WordCloud Plot\n",
        "\n",
        "# Set wordcloud figure size\n",
        "plt.figure(figsize = (8, 6))\n",
        "# Show image\n",
        "plt.imshow(word_cloud)\n",
        "# Remove Axis\n",
        "plt.axis(\"off\")\n",
        "# show plot\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CVv92oPl1zmr"
      },
      "source": [
        "## Sentiment Analysis using Text Classification\n",
        "### Classification using Bag of Words (or TF)\n",
        "#### Load the Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XGG2NDL_1zmr",
        "outputId": "991e928b-8a50-4eed-dfcf-cdf9410dda16"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      rating       date   variation  \\\n",
              "3145       5  30-Jul-18  Black  Dot   \n",
              "3146       5  30-Jul-18  Black  Dot   \n",
              "3147       5  30-Jul-18  Black  Dot   \n",
              "3148       5  30-Jul-18  White  Dot   \n",
              "3149       4  29-Jul-18  Black  Dot   \n",
              "\n",
              "                                       verified_reviews  feedback  \n",
              "3145  Perfect for kids, adults and everyone in betwe...         1  \n",
              "3146  Listening to music, searching locations, check...         1  \n",
              "3147  I do love these things, i have them running my...         1  \n",
              "3148  Only complaint I have is that the sound qualit...         1  \n",
              "3149                                               Good         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-79d54f22-cab8-4c80-93c7-39814fded82b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>date</th>\n",
              "      <th>variation</th>\n",
              "      <th>verified_reviews</th>\n",
              "      <th>feedback</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3145</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>Perfect for kids, adults and everyone in betwe...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3146</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>Listening to music, searching locations, check...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3147</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>I do love these things, i have them running my...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3148</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>White  Dot</td>\n",
              "      <td>Only complaint I have is that the sound qualit...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3149</th>\n",
              "      <td>4</td>\n",
              "      <td>29-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>Good</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79d54f22-cab8-4c80-93c7-39814fded82b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-79d54f22-cab8-4c80-93c7-39814fded82b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-79d54f22-cab8-4c80-93c7-39814fded82b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4f8f0902-fecb-461e-89ad-0fabf9ffcbbf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f8f0902-fecb-461e-89ad-0fabf9ffcbbf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4f8f0902-fecb-461e-89ad-0fabf9ffcbbf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "# Import libraries\n",
        "import pandas as pd\n",
        "\n",
        "# read the dataset\n",
        "copus_url = 'https://raw.githubusercontent.com/sharmaroshan/Amazon-Alexa-Reviews/master/amazon_alexa.tsv'\n",
        "df=pd.read_csv(copus_url, sep='\\t')\n",
        "\n",
        "# Show top 5-records\n",
        "df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0NSOzuOF1zmr"
      },
      "source": [
        "#### Explore the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "InFRWbIz1zmr",
        "outputId": "b957b0b1-940b-4eee-8cd0-a82ce5a3166b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import seaborn\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Count plot\n",
        "sns.countplot(x='feedback', data=df)\n",
        "\n",
        "# Set X-axis and Y-axis labels\n",
        "plt.xlabel('Sentiment Score')\n",
        "plt.ylabel('Number of Records')\n",
        "\n",
        "# Show the plot using show() function\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IvF42p7b1zmr"
      },
      "source": [
        "#### Feature Generation using CountVectorizer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "d5vsIaRz1zmr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4521ed97-fa82-4549-b2ee-d56e49f56a98"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "# Import CountVectorizer and RegexTokenizer\n",
        "from nltk.tokenize import RegexpTokenizer\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "\n",
        "# Create Regex tokenizer for removing special symbols and numeric values\n",
        "regex_tokenizer = RegexpTokenizer(r'[a-zA-Z]+')\n",
        "\n",
        "# Initialize CountVectorizer object\n",
        "count_vectorizer = CountVectorizer(lowercase=True,\n",
        "                     stop_words='english',\n",
        "                     ngram_range = (1,1),\n",
        "                     tokenizer = regex_tokenizer.tokenize)\n",
        "\n",
        "# Fit and transform the dataset\n",
        "count_vectors = count_vectorizer.fit_transform(df['verified_reviews'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "17JCjcdh1zmr"
      },
      "source": [
        "#### Split train and test set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "fKmG3rjW1zms"
      },
      "outputs": [],
      "source": [
        "# Import train_test_split\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Partition data into training and testing set\n",
        "from sklearn.model_selection import train_test_split\n",
        "feature_train, feature_test, target_train, target_test = train_test_split(\n",
        "    count_vectors, df['feedback'], test_size=0.3, random_state=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IL34MmhZ1zms"
      },
      "source": [
        "#### Classification Model Building using Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "Ko12mlSl1zms"
      },
      "outputs": [],
      "source": [
        "# import logistic regression scikit-learn model\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# instantiate the model\n",
        "logreg = LogisticRegression(solver='lbfgs')\n",
        "\n",
        "# fit the model with data\n",
        "logreg.fit(feature_train,target_train)\n",
        "\n",
        "# Forecast the target variable for given test dataset\n",
        "predictions = logreg.predict(feature_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a_wIcYtI1zms"
      },
      "source": [
        "#### Evaluate the Classification Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jt2yFf8a1zms",
        "scrolled": true,
        "outputId": "746318b3-e780-4a70-f56f-bb0dfc47a14f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Model Accuracy: 0.9428571428571428\n",
            "Logistic Regression Model Precision: 0.952433628318584\n",
            "Logistic Regression Model Recall: 0.9873853211009175\n",
            "Logistic Regression Model F1-Score: 0.9695945945945945\n"
          ]
        }
      ],
      "source": [
        "# Import metrics module for performance evaluation\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "# Assess model performance using accuracy measure\n",
        "print(\"Logistic Regression Model Accuracy:\",accuracy_score(target_test, predictions))\n",
        "# Calculate model precision\n",
        "print(\"Logistic Regression Model Precision:\",precision_score(target_test, predictions))\n",
        "# Calculate model recall\n",
        "print(\"Logistic Regression Model Recall:\",recall_score(target_test, predictions))\n",
        "# Calculate model f1 score\n",
        "print(\"Logistic Regression Model F1-Score:\",f1_score(target_test, predictions))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o9MkTVPo1zms"
      },
      "source": [
        "### Classification using TF-IDF"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "737UdMvu1zms",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fbf883d4-e4f6-4b5f-ff70-6b2b35d65431"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "# Import TfidfVectorizer and RegexTokenizer\n",
        "from nltk.tokenize import RegexpTokenizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "# Create Regex tokenizer for removing special symbols and numeric values\n",
        "regex_tokenizer = RegexpTokenizer(r'[a-zA-Z]+')\n",
        "\n",
        "# Initialize TfidfVectorizer object\n",
        "tfidf = TfidfVectorizer(lowercase=True,stop_words='english',ngram_range = (1,1),tokenizer = regex_tokenizer.tokenize)\n",
        "\n",
        "# Fit and transform the dataset\n",
        "text_tfidf= tfidf.fit_transform(df['verified_reviews'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "9JtyZbrs1zms"
      },
      "outputs": [],
      "source": [
        "# Import train_test_split\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Partition data into training and testing set\n",
        "from sklearn.model_selection import train_test_split\n",
        "feature_train, feature_test, target_train, target_test = train_test_split(\n",
        "    text_tfidf, df['feedback'], test_size=0.3, random_state=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "ylg9tJu21zms"
      },
      "outputs": [],
      "source": [
        "# import logistic regression scikit-learn model\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# instantiate the model\n",
        "logreg = LogisticRegression(solver='lbfgs')\n",
        "\n",
        "# fit the model with data\n",
        "logreg.fit(feature_train,target_train)\n",
        "\n",
        "# Forecast the target variable for given test dataset\n",
        "predictions = logreg.predict(feature_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g3h2OeW_1zms",
        "outputId": "6e4bcef8-587b-44c5-ef0a-550f3562317a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Model Accuracy: 0.9238095238095239\n",
            "Logistic Regression Model Precision: 0.923728813559322\n",
            "Logistic Regression Model Recall: 1.0\n",
            "Logistic Regression Model F1-Score: 0.960352422907489\n"
          ]
        }
      ],
      "source": [
        "# Import metrics module for performance evaluation\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "# Assess model performance using accuracy measure\n",
        "print(\"Logistic Regression Model Accuracy:\",accuracy_score(target_test, predictions))\n",
        "# Calculate model precision\n",
        "print(\"Logistic Regression Model Precision:\",precision_score(target_test, predictions))\n",
        "# Calculate model recall\n",
        "print(\"Logistic Regression Model Recall:\",recall_score(target_test, predictions))\n",
        "# Calculate model f1 score\n",
        "print(\"Logistic Regression Model F1-Score:\",f1_score(target_test, predictions))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y2PVAjSw1zms"
      },
      "source": [
        "## Text Similarity"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "dHZG4VPv1zms",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "088f23ef-8dc4-4cce-ddbd-8734530b5f75"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "def jaccard_similarity(sent1, sent2):\n",
        "    \"\"\"Find text similarity using jaccard similarity\"\"\"\n",
        "\n",
        "    # Tokenize sentences\n",
        "    token1 = set(sent1.split())\n",
        "    token2 = set(sent2.split())\n",
        "\n",
        "    # intersection between tokens of two sentences\n",
        "    intersection_tokens = token1.intersection(token2)\n",
        "\n",
        "    # Union between tokens of two sentences\n",
        "    union_tokens=token1.union(token2)\n",
        "\n",
        "    # Cosine Similarity\n",
        "    sim_= float(len(intersection_tokens) / len(union_tokens))\n",
        "    return sim_\n",
        "\n",
        "# Call function\n",
        "jaccard_similarity('I love pets.','I hate pets.')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "i7jd19bJ1zms",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "571b36c6-4665-4728-b260-335833660d62"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.33609693]]\n"
          ]
        }
      ],
      "source": [
        "# Let's import text feature extraction TfidfVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "docs=['I love pets.','I hate pets.']\n",
        "\n",
        "# Initialize TfidfVectorizer object\n",
        "tfidf= TfidfVectorizer()\n",
        "\n",
        "# Fit and transform the given data\n",
        "tfidf_vector = tfidf.fit_transform(docs)\n",
        "\n",
        "# Import cosine_similarity metrics\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "# compute similarity using cosine similarity\n",
        "cos_sim=cosine_similarity(tfidf_vector[0], tfidf_vector[1])\n",
        "print(cos_sim)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "Tgq2J3yG82sv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "469f20d9-0827-43bf-bd63-0c5fd8fea726"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.6362041590639654\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-31-3d21f1b822d5>:9: UserWarning: [W007] The model you're using has no word vectors loaded, so the result of the Doc.similarity method will be based on the tagger, parser and NER, which may not give useful similarity judgements. This may happen if you're using one of the small models, e.g. `en_core_web_sm`, which don't ship with word vectors and only use context-sensitive tensors. You can always add your own word vectors, or use one of the larger models instead if available.\n",
            "  print(doc1.similarity(doc2))\n"
          ]
        }
      ],
      "source": [
        "# Load English model for tokenizer, tagger, parser, and NER\n",
        "nlp = spacy.load('en_core_web_sm')\n",
        "\n",
        "# Create documents 123123123\n",
        "doc1 = nlp(u'I love pets.')\n",
        "doc2 = nlp(u'I hate pets')\n",
        "\n",
        "# Find similarity\n",
        "print(doc1.similarity(doc2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "ULzTxiWY8QmP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9d35a38-5a99-4a76-e676-7d8db609034b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting en-core-web-lg==3.7.1\n",
            "  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.7.1/en_core_web_lg-3.7.1-py3-none-any.whl (587.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m587.7/587.7 MB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: spacy<3.8.0,>=3.7.2 in /usr/local/lib/python3.10/dist-packages (from en-core-web-lg==3.7.1) (3.7.4)\n",
            "Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (3.0.12)\n",
            "Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (1.0.5)\n",
            "Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (1.0.10)\n",
            "Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.0.8)\n",
            "Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (3.0.9)\n",
            "Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (8.2.3)\n",
            "Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (1.1.2)\n",
            "Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.4.8)\n",
            "Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.0.10)\n",
            "Requirement already satisfied: weasel<0.4.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (0.3.4)\n",
            "Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (0.9.0)\n",
            "Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (6.4.0)\n",
            "Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (4.66.2)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.31.0)\n",
            "Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.6.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (3.1.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (67.7.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (24.0)\n",
            "Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (3.3.0)\n",
            "Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (1.25.2)\n",
            "Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (0.6.0)\n",
            "Requirement already satisfied: pydantic-core==2.16.3 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.16.3)\n",
            "Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (4.10.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2024.2.2)\n",
            "Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (0.7.11)\n",
            "Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (0.1.4)\n",
            "Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (8.1.7)\n",
            "Requirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.4.0,>=0.1.0->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (0.16.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy<3.8.0,>=3.7.2->en-core-web-lg==3.7.1) (2.1.5)\n",
            "Installing collected packages: en-core-web-lg\n",
            "Successfully installed en-core-web-lg-3.7.1\n",
            "\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n",
            "You can now load the package via spacy.load('en_core_web_lg')\n",
            "\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n",
            "If you are in a Jupyter or Colab notebook, you may need to restart Python in\n",
            "order to load all the package's dependencies. You can do this by selecting the\n",
            "'Restart kernel' or 'Restart runtime' option.\n"
          ]
        }
      ],
      "source": [
        "!python -m spacy download en_core_web_lg"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "JSse2W-W1zms",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29887a8b-b89b-4387-b22d-0940799908ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9041243947777828\n"
          ]
        }
      ],
      "source": [
        "# Import spacy\n",
        "import spacy\n",
        "\n",
        "# Load English model for tokenizer, tagger, parser, and NER\n",
        "nlp = spacy.load('en_core_web_lg')\n",
        "\n",
        "# Create documents\n",
        "doc1 = nlp(u'I love pets.')\n",
        "doc2 = nlp(u'I hate pets')\n",
        "\n",
        "# Find similarity\n",
        "print(doc1.similarity(doc2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SMRL_eKmL43W"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "# [Assignment 1] Sentiment Analysis!\n",
        "Try Sentiment Analysis by following suggenstions.\n",
        "- Use Other dataset: [dataset list](https://research.aimultiple.com/sentiment-analysis-dataset/)\n",
        "- Change your classifier: Other than `Logistic Regression`. [ref](https://www.kaggle.com/code/jeffd23/10-classifier-showdown-in-scikit-learn)\n",
        "- Additional preprocessing: n-gram, stopwords [ref](https://towardsdatascience.com/nlp-preprocessing-with-nltk-3c04ee00edc0)\n",
        "\n",
        "Will grade it only on and off. But briefly tell us what did you try.\n",
        "-\n",
        "-\n",
        "-"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iEiT1QqTE3np"
      },
      "source": [
        "#### Load the Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "c4b4dcef-58f4-4b0b-d321-4a86f5e33bd0",
        "id": "HgaiKMYdE3np"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      rating       date   variation  \\\n",
              "3145       5  30-Jul-18  Black  Dot   \n",
              "3146       5  30-Jul-18  Black  Dot   \n",
              "3147       5  30-Jul-18  Black  Dot   \n",
              "3148       5  30-Jul-18  White  Dot   \n",
              "3149       4  29-Jul-18  Black  Dot   \n",
              "\n",
              "                                       verified_reviews  feedback  \n",
              "3145  Perfect for kids, adults and everyone in betwe...         1  \n",
              "3146  Listening to music, searching locations, check...         1  \n",
              "3147  I do love these things, i have them running my...         1  \n",
              "3148  Only complaint I have is that the sound qualit...         1  \n",
              "3149                                               Good         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-271a599c-49cf-4899-b498-2c0c290e4c5d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>date</th>\n",
              "      <th>variation</th>\n",
              "      <th>verified_reviews</th>\n",
              "      <th>feedback</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3145</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>Perfect for kids, adults and everyone in betwe...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3146</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>Listening to music, searching locations, check...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3147</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>I do love these things, i have them running my...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3148</th>\n",
              "      <td>5</td>\n",
              "      <td>30-Jul-18</td>\n",
              "      <td>White  Dot</td>\n",
              "      <td>Only complaint I have is that the sound qualit...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3149</th>\n",
              "      <td>4</td>\n",
              "      <td>29-Jul-18</td>\n",
              "      <td>Black  Dot</td>\n",
              "      <td>Good</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-271a599c-49cf-4899-b498-2c0c290e4c5d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-271a599c-49cf-4899-b498-2c0c290e4c5d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-271a599c-49cf-4899-b498-2c0c290e4c5d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3dd777a7-358a-44f9-b33c-137cb7ec8994\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3dd777a7-358a-44f9-b33c-137cb7ec8994')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3dd777a7-358a-44f9-b33c-137cb7ec8994 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "# Import libraries\n",
        "import pandas as pd\n",
        "\n",
        "# read the dataset\n",
        "copus_url = 'https://raw.githubusercontent.com/sharmaroshan/Amazon-Alexa-Reviews/master/amazon_alexa.tsv'\n",
        "df=pd.read_csv(copus_url, sep='\\t')\n",
        "\n",
        "# Show top 5-records\n",
        "df.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5TRWRky2E3nq"
      },
      "source": [
        "#### Explore the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "outputId": "f174bc55-e8fc-43c6-8b10-5a91d088235b",
        "id": "idTWG-3JE3nq"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Import seaborn\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Count plot\n",
        "sns.countplot(x='feedback', data=df)\n",
        "\n",
        "# Set X-axis and Y-axis labels\n",
        "plt.xlabel('Sentiment Score')\n",
        "plt.ylabel('Number of Records')\n",
        "\n",
        "# Show the plot using show() function\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MaUyHGOOE3nq"
      },
      "source": [
        "#### Feature Generation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "YsIRX5j5E3nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f4f4430-57e0-4b5c-c07e-686fe7c98748"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "# Import CountVectorizer and RegexTokenizer\n",
        "from nltk.tokenize import RegexpTokenizer\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "\n",
        "# Create Regex tokenizer for removing special symbols and numeric values\n",
        "regex_tokenizer = RegexpTokenizer(r'[a-zA-Z]+')\n",
        "\n",
        "# Initialize CountVectorizer object\n",
        "count_vectorizer = CountVectorizer(lowercase=True,\n",
        "                     stop_words='english',\n",
        "                     ngram_range = (1,1),\n",
        "                     tokenizer = regex_tokenizer.tokenize)\n",
        "\n",
        "# Fit and transform the dataset\n",
        "count_vectors = count_vectorizer.fit_transform(df['verified_reviews'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rQoQhIF_E3nq"
      },
      "source": [
        "#### Split train and test set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "ifVhMuK1E3nr"
      },
      "outputs": [],
      "source": [
        "# Import train_test_split\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Partition data into training and testing set\n",
        "from sklearn.model_selection import train_test_split\n",
        "feature_train, feature_test, target_train, target_test = train_test_split(\n",
        "    count_vectors, df['feedback'], test_size=0.3, random_state=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i0LqbdWhE3nr"
      },
      "source": [
        "#### Classification Model Building using Any Machine Learning Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "I3ryF5V8E3nr"
      },
      "outputs": [],
      "source": [
        "# import model from scikit-learn model\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# instantiate the model\n",
        "model = LinearRegression()\n",
        "\n",
        "# fit the model with data\n",
        "model.fit(feature_train,target_train)\n",
        "\n",
        "# Forecast the target variable for given test dataset\n",
        "predictions = model.predict(feature_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c98s7XDOE3nr"
      },
      "source": [
        "#### Evaluate the Classification Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "fWAnjR9dE3nr"
      },
      "outputs": [],
      "source": [
        "# Import metrics module for performance evaluation\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "# Assess model performance using accuracy measure\n",
        "print(\"Linear Regression Model Accuracy:\",accuracy_score(target_test, predictions))\n",
        "# Calculate model precision\n",
        "print(\"Linear Regression Model Precision:\",precision_score(target_test, predictions))\n",
        "# Calculate model recall\n",
        "print(\"Linear Regression Model Recall:\",recall_score(target_test, predictions))\n",
        "# Calculate model f1 score\n",
        "print(\"Linear Regression Model F1-Score:\",f1_score(target_test, predictions))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import metrics module for performance evaluation\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "\n",
        "# Assess model performance using mean squared error\n",
        "mse = mean_squared_error(target_test, predictions)\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "\n",
        "# Assess model performance using mean absolute error\n",
        "mae = mean_absolute_error(target_test, predictions)\n",
        "print(\"Mean Absolute Error:\", mae)\n",
        "\n",
        "# Assess model performance using R-squared\n",
        "r2 = r2_score(target_test, predictions)\n",
        "print(\"R-squared:\", r2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7VYz17-4ABba",
        "outputId": "f27e213c-12f7-4915-b368-74456dd17a30"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 0.3946984280696088\n",
            "Mean Absolute Error: 0.3049689193980361\n",
            "R-squared: -4.537193096123892\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}